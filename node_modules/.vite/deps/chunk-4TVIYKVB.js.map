{
  "version": 3,
  "sources": ["../../jsbi/tsc-out/jsbi.mjs"],
  "sourcesContent": ["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[1] = signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[0] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // DataView-related functionality.\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\n    }\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\n        const result = new JSBI(3, false);\n        result.__setDigit(0, low & 0x3FFFFFFF);\n        result.__setDigit(1, ((high & 0xFFFFFFF) << 2) | (low >>> 30));\n        result.__setDigit(2, high >>> 28);\n        return result.__trim();\n    }\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\n    }\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\n        value = JSBI.asUintN(64, value);\n        let high = 0;\n        let low = 0;\n        if (value.length > 0) {\n            low = value.__digit(0);\n            if (value.length > 1) {\n                const d1 = value.__digit(1);\n                low = low | d1 << 30;\n                high = d1 >>> 2;\n                if (value.length > 2) {\n                    high = high | (value.__digit(2) << 28);\n                }\n            }\n        }\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        dataview.setUint32(byteOffset + h, high, littleEndian);\n        dataview.setUint32(byteOffset + l, low, littleEndian);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[1] >>> 20) & 0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[1] & 0xFFFFF) | kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[0];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            const exoticToPrim = obj[Symbol.toPrimitive];\n            if (exoticToPrim) {\n                const primitive = exoticToPrim(hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15)\n            : (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map"],
  "mappings": "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",
  "names": ["JSBI", "Array", "constructor", "length", "sign", "Object", "setPrototypeOf", "prototype", "__kMaxLength", "RangeError", "BigInt", "arg", "Math", "floor", "Number", "isFinite", "__zero", "__isOneDigitInt", "__oneDigit", "__fromDouble", "result", "__fromString", "SyntaxError", "primitive", "__toPrimitive", "TypeError", "toDebugString", "digit", "push", "toString", "join", "radix", "__toStringBasePowerOfTwo", "__toStringGeneric", "valueOf", "Error", "toNumber", "x", "xLength", "value", "__unsignedDigit", "xMsd", "__digit", "msdLeadingZeros", "__clz30", "xBitLength", "exponent", "currentDigit", "digitIndex", "shift", "mantissaHigh", "mantissaHighBitsUnset", "mantissaLow", "mantissaLowBitsUnset", "rounding", "__decideRounding", "signBit", "__kBitConversionInts", "__kBitConversionDouble", "unaryMinus", "__copy", "bitwiseNot", "__absoluteSubOne", "__trim", "__absoluteAddOne", "exponentiate", "y", "expValue", "__kMaxLengthBits", "neededDigits", "__initializeDigits", "msd", "__setDigit", "runningSquare", "multiply", "resultLength", "__clzmsd", "i", "__multiplyAccumulate", "divide", "__absoluteCompare", "resultSign", "divisor", "quotient", "__absoluteDivSmall", "__absoluteDivLarge", "remainder", "remainderDigit", "__absoluteModSmall", "add", "__absoluteAdd", "__absoluteSub", "subtract", "leftShift", "__rightShiftByAbsolute", "__leftShiftByAbsolute", "signedRightShift", "unsignedRightShift", "lessThan", "__compareToBigInt", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual", "equal", "notEqual", "bitwiseAnd", "max", "__absoluteAnd", "y1", "__absoluteOr", "__absoluteAndNot", "bitwiseXor", "__absoluteXor", "bitwiseOr", "asIntN", "n", "neededLength", "topDigit", "compareDigit", "__truncateToNBits", "__truncateAndSubFromPowerOfTwo", "asUintN", "bitsInTopDigit", "ADD", "__toNumeric", "__isBigInt", "LT", "__compare", "LE", "GT", "GE", "EQ", "__equalToNumber", "NE", "DataViewGetBigInt64", "dataview", "byteOffset", "littleEndian", "DataViewGetBigUint64", "h", "l", "high", "getUint32", "low", "DataViewSetBigInt64", "DataViewSetBigUint64", "d1", "setUint32", "newLength", "last", "pop", "mantissaBitsUnset", "topUnconsumedBit", "mask", "rawExponent", "digits", "kMantissaHighTopBit", "msdTopBit", "remainingMantissaBits", "__isWhitespace", "c", "string", "cursor", "current", "charCodeAt", "chars", "bitsPerChar", "__kMaxBitsPerChar", "roundup", "__kBitsPerCharTableMultiplier", "bitsMin", "__kBitsPerCharTableShift", "limDigit", "limAlpha", "parts", "partsBits", "done", "part", "bits", "d", "__fillFromParts", "charsSoFar", "multiplier", "m", "digitsSoFar", "__inplaceMultiplyAdd", "bitsInDigit", "partBits", "charMask", "charsRequired", "pos", "availableBits", "newDigit", "__kConversionChars", "consumedBits", "isRecursiveCall", "bitLength", "maxBitsPerChar", "minBitsPerChar", "secondHalfChars", "conqueror", "secondHalf", "input", "__halfDigit", "__setHalfDigit", "divisionResult", "firstHalf", "__unequalSign", "leftNegative", "__absoluteGreater", "bothNegative", "__absoluteLess", "xSign", "__compareToNumber", "ySign", "yAbs", "abs", "xDigit", "__compareToDouble", "yBitLength", "compareMantissa", "__comparisonResultToBool", "op", "carry", "r", "borrow", "inputLength", "__setDigitGrow", "yLength", "numPairs", "tmp", "tmpLength", "diff", "multiplicand", "accumulator", "accumulatorIndex", "m2Low", "m2High", "acc", "m1", "m1Low", "m1High", "rLow", "__imul", "rMid1", "rMid2", "rHigh", "__internalMultiplyAdd", "source", "factor", "summand", "rx", "ry", "mLow", "mHigh", "dLow", "dHigh", "pLow", "pMid1", "pMid2", "pHigh", "upperHalf", "lowerHalf", "dividend", "wantQuotient", "wantRemainder", "__halfDigitLength", "n2", "q", "qhatv", "__clz15", "__specialLeftShift", "u", "vn1", "halfDigitBuffer", "qhat", "j", "ujn", "rhat", "vn2", "ujn2", "__inplaceSub", "__inplaceAdd", "__inplaceRightShift", "startIndex", "halfDigits", "sum", "subtrahend", "r0", "sub", "r15", "addDigit", "__toShiftAmount", "digitShift", "bitsShift", "grow", "__rightShiftByMaximum", "mustRoundDown", "obj", "hint", "Symbol", "toPrimitive", "exoticToPrim", "call", "drop", "min", "limit", "msdBitsConsumed", "resultMsd", "minuendMsd", "len", "previous", "updated", "__digitPow", "base", "__kBitConversionBuffer", "ArrayBuffer", "Float64Array", "Int32Array", "clz32", "log", "LN2", "imul", "a", "b"]
}
