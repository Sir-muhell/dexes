{
  "version": 3,
  "sources": ["../../@uniswap/sdk-core/node_modules/jsbi/lib/jsbi.ts", "../../tiny-invariant/dist/esm/tiny-invariant.js", "../../decimal.js-light/decimal.mjs", "../../big.js/big.mjs", "../../toformat/toFormat.js", "../../@uniswap/sdk-core/src/chains.ts", "../../@uniswap/sdk-core/src/addresses.ts", "../../@uniswap/sdk-core/src/constants.ts", "../../@uniswap/sdk-core/src/entities/fractions/fraction.ts", "../../@uniswap/sdk-core/src/entities/fractions/currencyAmount.ts", "../../@uniswap/sdk-core/src/entities/fractions/percent.ts", "../../@uniswap/sdk-core/src/entities/fractions/price.ts", "../../@uniswap/sdk-core/src/entities/baseCurrency.ts", "../../@uniswap/sdk-core/src/entities/nativeCurrency.ts", "../../@uniswap/sdk-core/src/utils/validateAndParseAddress.ts", "../../@uniswap/sdk-core/src/entities/token.ts", "../../@uniswap/sdk-core/src/entities/weth9.ts", "../../@uniswap/sdk-core/src/entities/ether.ts", "../../@uniswap/sdk-core/src/utils/computePriceImpact.ts", "../../@uniswap/sdk-core/src/utils/sortedInsert.ts", "../../@uniswap/sdk-core/src/utils/sqrt.ts"],
  "sourcesContent": [null, "var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n", "/*\r\n *  decimal.js-light v2.5.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js-light\r\n *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Expat Licence\r\n */\r\n\r\n\r\n// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //\r\n\r\n\r\n// The limit on the value of `precision`, and on the value of the first argument to\r\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\nvar MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n    // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to MAX_E\r\n\r\n    // The natural logarithm of 10.\r\n    // 115 digits\r\n    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n  },\r\n\r\n\r\n// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //\r\n\r\n\r\n  Decimal,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  ONE,\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue                       abs\r\n *  comparedTo                          cmp\r\n *  decimalPlaces                       dp\r\n *  dividedBy                           div\r\n *  dividedToIntegerBy                  idiv\r\n *  equals                              eq\r\n *  exponent\r\n *  greaterThan                         gt\r\n *  greaterThanOrEqualTo                gte\r\n *  isInteger                           isint\r\n *  isNegative                          isneg\r\n *  isPositive                          ispos\r\n *  isZero\r\n *  lessThan                            lt\r\n *  lessThanOrEqualTo                   lte\r\n *  logarithm                           log\r\n *  minus                               sub\r\n *  modulo                              mod\r\n *  naturalExponential                  exp\r\n *  naturalLogarithm                    ln\r\n *  negated                             neg\r\n *  plus                                add\r\n *  precision                           sd\r\n *  squareRoot                          sqrt\r\n *  times                               mul\r\n *  toDecimalPlaces                     todp\r\n *  toExponential\r\n *  toFixed\r\n *  toInteger                           toint\r\n *  toNumber\r\n *  toPower                             pow\r\n *  toPrecision\r\n *  toSignificantDigits                 tosd\r\n *  toString\r\n *  valueOf                             val\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s) x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this;\r\n\r\n  y = new x.constructor(y);\r\n\r\n  // Signs differ?\r\n  if (x.s !== y.s) return x.s || -y.s;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n  xdL = x.d.length;\r\n  ydL = y.d.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var x = this,\r\n    w = x.d.length - 1,\r\n    dp = (w - x.e) * LOG_BASE;\r\n\r\n  // Subtract the number of trailing zeros of the last word.\r\n  w = x.d[w];\r\n  if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n  return dp < 0 ? 0 : dp;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, truncated to `precision` significant digits.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.idiv = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n *\r\n */\r\nP.exponent = function () {\r\n  return getBase10Exponent(this);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  return this.cmp(y) >= 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isint = function () {\r\n  return this.e > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isneg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.ispos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return this.s === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n * `precision` significant digits.\r\n *\r\n * If no base is specified, return log[10](x).\r\n *\r\n * log[base](x) = ln(x) / ln(base)\r\n *\r\n * The maximum error of the result is 1 ulp (unit in the last place).\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var r,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    wpr = pr + 5;\r\n\r\n  // Default base is 10.\r\n  if (base === void 0) {\r\n    base = new Ctor(10);\r\n  } else {\r\n    base = new Ctor(base);\r\n\r\n    // log[-b](x) = NaN\r\n    // log[0](x)  = NaN\r\n    // log[1](x)  = NaN\r\n    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  // log[b](-x) = NaN\r\n  // log[b](0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // log[b](1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  external = false;\r\n  r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // x % 0 = NaN\r\n  if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n  // Return x if x is 0.\r\n  if (!x.s) return round(new Ctor(x), pr);\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n  q = divide(x, y, 0, 1).times(y);\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return exp(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * truncated to `precision` significant digits.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return ln(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s || 0;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var e, sd, w,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  e = getBase10Exponent(x) + 1;\r\n  w = x.d.length - 1;\r\n  sd = w * LOG_BASE + 1;\r\n  w = x.d[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n  }\r\n\r\n  return z && e > sd ? e : sd;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var e, n, pr, r, s, t, wpr,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative or zero?\r\n  if (x.s < 1) {\r\n    if (!x.s) return new Ctor(0);\r\n\r\n    // sqrt(-x) = NaN\r\n    throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  e = getBase10Exponent(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  pr = Ctor.precision;\r\n  s = wpr = pr + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n      n = n.slice(wpr - 3, wpr + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (s == wpr && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        round(t, pr + 1, 0);\r\n\r\n        if (t.times(t).eq(x)) {\r\n          r = t;\r\n          break;\r\n        }\r\n      } else if (n != '9999') {\r\n        break;\r\n      }\r\n\r\n      wpr += 4;\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  // Return 0 if either is 0.\r\n  if (!x.s || !y.s) return new Ctor(0);\r\n\r\n  y.s *= x.s;\r\n  e = x.e + y.e;\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = e;\r\n\r\n  return external ? round(y, Ctor.precision) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.todp = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = toString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), dp + 1, rm);\r\n    str = toString(x, true, dp + 1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) return toString(x);\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isneg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.toInteger = P.toint = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n * truncated to `precision` significant digits.\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * The maximum error is 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, sign, yIsInt,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    guard = 12,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // pow(x, 0) = 1\r\n  if (!y.s) return new Ctor(ONE);\r\n\r\n  x = new Ctor(x);\r\n\r\n  // pow(0, y > 0) = 0\r\n  // pow(0, y < 0) = Infinity\r\n  if (!x.s) {\r\n    if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n    return x;\r\n  }\r\n\r\n  // pow(1, y) = 1\r\n  if (x.eq(ONE)) return x;\r\n\r\n  pr = Ctor.precision;\r\n\r\n  // pow(x, 1) = x\r\n  if (y.eq(ONE)) return round(x, pr);\r\n\r\n  e = y.e;\r\n  k = y.d.length - 1;\r\n  yIsInt = e >= k;\r\n  sign = x.s;\r\n\r\n  if (!yIsInt) {\r\n\r\n    // pow(x < 0, y non-integer) = NaN\r\n    if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = new Ctor(ONE);\r\n\r\n    // Max k of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (k % 2) {\r\n        r = r.times(x);\r\n        truncate(r.d, e);\r\n      }\r\n\r\n      k = mathfloor(k / 2);\r\n      if (k === 0) break;\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, e);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n  }\r\n\r\n  // Result is negative if x is negative and the last digit of integer y is odd.\r\n  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n  x.s = 1;\r\n  external = false;\r\n  r = y.times(ln(x, pr + guard));\r\n  external = true;\r\n  r = exp(r);\r\n  r.s = sign;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var e, str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), sd, rm);\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toSignificantDigits = P.tosd = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return round(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {\r\n  var x = this,\r\n    e = getBase10Exponent(x),\r\n    Ctor = x.constructor;\r\n\r\n  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  add                 P.minus, P.plus\r\n *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n *  exp                 P.exp, P.pow\r\n *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n *                      P.toString, divide, round, toString, exp, ln\r\n *  getLn10             P.log, ln\r\n *  getZeroString       digitsToString, toString\r\n *  ln                  P.log, P.ln, P.pow, exp\r\n *  parseDecimal        Decimal\r\n *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n *                      divide, getLn10, exp, ln\r\n *  subtract            P.minus, P.plus\r\n *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n *  truncate            P.pow\r\n *\r\n *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n */\r\n\r\n\r\nfunction add(x, y) {\r\n  var carry, d, e, i, k, len, xd, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // If either is zero...\r\n  if (!x.s || !y.s) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!y.s) y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  k = x.e;\r\n  e = y.e;\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % BASE | 0;\r\n      carry = temp / BASE | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * BASE + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, dp) {\r\n    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either 0?\r\n    if (!x.s) return new Ctor(x);\r\n    if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n    e = x.e - y.e;\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n    if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n    } else if (dp) {\r\n      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) return new Ctor(0);\r\n\r\n    // Convert precision in number of base 10 digits to base 1e7 digits.\r\n    sd = sd / LOG_BASE + 2 | 0;\r\n    i = 0;\r\n\r\n    // divisor < 1e7\r\n    if (yL == 1) {\r\n      k = 0;\r\n      yd = yd[0];\r\n      sd++;\r\n\r\n      // k is the carry.\r\n      for (; (i < xL || k) && sd--; i++) {\r\n        t = k * BASE + (xd[i] || 0);\r\n        qd[i] = t / yd | 0;\r\n        k = t % yd | 0;\r\n      }\r\n\r\n    // divisor >= 1e7\r\n    } else {\r\n\r\n      // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n      k = BASE / (yd[0] + 1) | 0;\r\n\r\n      if (k > 1) {\r\n        yd = multiplyInteger(yd, k);\r\n        xd = multiplyInteger(xd, k);\r\n        yL = yd.length;\r\n        xL = xd.length;\r\n      }\r\n\r\n      xi = yL;\r\n      rem = xd.slice(0, yL);\r\n      remL = rem.length;\r\n\r\n      // Add zeros to make remainder as long as divisor.\r\n      for (; remL < yL;) rem[remL++] = 0;\r\n\r\n      yz = yd.slice();\r\n      yz.unshift(0);\r\n      yd0 = yd[0];\r\n\r\n      if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n      do {\r\n        k = 0;\r\n\r\n        // Compare divisor and remainder.\r\n        cmp = compare(yd, rem, yL, remL);\r\n\r\n        // If divisor < remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Calculate trial digit, k.\r\n          rem0 = rem[0];\r\n          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n          // k will be how many times the divisor goes into the current remainder.\r\n          k = rem0 / yd0 | 0;\r\n\r\n          //  Algorithm:\r\n          //  1. product = divisor * trial digit (k)\r\n          //  2. if product > remainder: product -= divisor, k--\r\n          //  3. remainder -= product\r\n          //  4. if product was < remainder at 2:\r\n          //    5. compare new remainder and divisor\r\n          //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n          if (k > 1) {\r\n            if (k >= BASE) k = BASE - 1;\r\n\r\n            // product = divisor * trial digit.\r\n            prod = multiplyInteger(yd, k);\r\n            prodL = prod.length;\r\n            remL = rem.length;\r\n\r\n            // Compare product and remainder.\r\n            cmp = compare(prod, rem, prodL, remL);\r\n\r\n            // product > remainder.\r\n            if (cmp == 1) {\r\n              k--;\r\n\r\n              // Subtract divisor from product.\r\n              subtract(prod, yL < prodL ? yz : yd, prodL);\r\n            }\r\n          } else {\r\n\r\n            // cmp is -1.\r\n            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n            if (k == 0) cmp = k = 1;\r\n            prod = yd.slice();\r\n          }\r\n\r\n          prodL = prod.length;\r\n          if (prodL < remL) prod.unshift(0);\r\n\r\n          // Subtract product from remainder.\r\n          subtract(rem, prod, remL);\r\n\r\n          // If product was < previous remainder.\r\n          if (cmp == -1) {\r\n            remL = rem.length;\r\n\r\n            // Compare divisor and new remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < new remainder, subtract divisor from remainder.\r\n            if (cmp < 1) {\r\n              k++;\r\n\r\n              // Subtract divisor from remainder.\r\n              subtract(rem, yL < remL ? yz : yd, remL);\r\n            }\r\n          }\r\n\r\n          remL = rem.length;\r\n        } else if (cmp === 0) {\r\n          k++;\r\n          rem = [0];\r\n        }    // if cmp === 1, k will be 0\r\n\r\n        // Add the next digit, k, to the result array.\r\n        qd[i++] = k;\r\n\r\n        // Update the remainder.\r\n        if (cmp && rem[0]) {\r\n          rem[remL++] = xd[xi] || 0;\r\n        } else {\r\n          rem = [xd[xi]];\r\n          remL = 1;\r\n        }\r\n\r\n      } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n    }\r\n\r\n    // Leading zero?\r\n    if (!qd[0]) qd.shift();\r\n\r\n    q.e = e;\r\n\r\n    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n * significant digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n */\r\nfunction exp(x, sd) {\r\n  var denominator, guard, pow, sum, t, wpr,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n  // exp(0) = 1\r\n  if (!x.s) return new Ctor(ONE);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  while (x.abs().gte(0.1)) {\r\n    x = x.times(t);    // x = x / 2^5\r\n    k += 5;\r\n  }\r\n\r\n  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(ONE);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = round(pow.times(x), wpr);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      while (k--) sum = round(sum.times(sum), wpr);\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(x) {\r\n  var e = x.e * LOG_BASE,\r\n    w = x.d[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for (; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n\r\n  if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(decimalError + 'LN10 precision limit exceeded');\r\n  }\r\n\r\n  return round(new Ctor(Ctor.LN10), sd);\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n * digits.\r\n *\r\n *  ln(n) is non-terminating (n != 1)\r\n *\r\n */\r\nfunction ln(y, sd) {\r\n  var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // ln(-x) = NaN\r\n  // ln(0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // ln(1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  if (x.eq(10)) {\r\n    if (sd == null) external = true;\r\n    return getLn10(Ctor, wpr);\r\n  }\r\n\r\n  wpr += guard;\r\n  Ctor.precision = wpr;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n  e = getBase10Exponent(x);\r\n\r\n  if (Math.abs(e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n    Ctor.precision = pr;\r\n    return sd == null ? (external = true, round(x, pr)) : x;\r\n  }\r\n\r\n  // x is reduced to a value near 1.\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n  x2 = round(x.times(x), wpr);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = round(numerator.times(x2), wpr);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    e = e - i - 1;\r\n    x.e = mathfloor(e / LOG_BASE);\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n  } else {\r\n\r\n    // Zero.\r\n    x.s = 0;\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n */\r\n function round(x, sd, rm) {\r\n  var i, j, k, n, rd, doRound, w, xdi,\r\n    xd = x.d;\r\n\r\n  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n  // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n  // xdi: the index of w within xd.\r\n  // n: the number of digits of w.\r\n  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n  // they had leading zeros)\r\n  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n  // Get the length of the first word of the digits array xd.\r\n  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n  i = sd - n;\r\n\r\n  // Is the rounding digit in the first word of xd?\r\n  if (i < 0) {\r\n    i += LOG_BASE;\r\n    j = sd;\r\n    w = xd[xdi = 0];\r\n  } else {\r\n    xdi = Math.ceil((i + 1) / LOG_BASE);\r\n    k = xd.length;\r\n    if (xdi >= k) return x;\r\n    w = k = xd[xdi];\r\n\r\n    // Get the number of digits of w.\r\n    for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n    // Get the index of rd within w.\r\n    i %= LOG_BASE;\r\n\r\n    // Get the index of rd within w, adjusted for leading zeros.\r\n    // The number of leading zeros of w is given by LOG_BASE - n.\r\n    j = i - LOG_BASE + n;\r\n  }\r\n\r\n  if (rm !== void 0) {\r\n    k = mathpow(10, n - j - 1);\r\n\r\n    // Get the rounding digit at index j of w.\r\n    rd = w / k % 10 | 0;\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n    // 714.\r\n\r\n    doRound = rm < 4\r\n      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n  }\r\n\r\n  if (sd < 1 || !xd[0]) {\r\n    if (doRound) {\r\n      k = getBase10Exponent(x);\r\n      xd.length = 1;\r\n\r\n      // Convert sd to decimal places.\r\n      sd = sd - k - 1;\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n      x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n    } else {\r\n      xd.length = 1;\r\n\r\n      // Zero.\r\n      xd[0] = x.e = x.s = 0;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  // Remove excess digits.\r\n  if (i == 0) {\r\n    xd.length = xdi;\r\n    k = 1;\r\n    xdi--;\r\n  } else {\r\n    xd.length = xdi + 1;\r\n    k = mathpow(10, LOG_BASE - i);\r\n\r\n    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n    // j > 0 means i > number of leading zeros of w.\r\n    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n  }\r\n\r\n  if (doRound) {\r\n    for (;;) {\r\n\r\n      // Is the digit to be rounded up in the first word of xd?\r\n      if (xdi == 0) {\r\n        if ((xd[0] += k) == BASE) {\r\n          xd[0] = 1;\r\n          ++x.e;\r\n        }\r\n\r\n        break;\r\n      } else {\r\n        xd[xdi] += k;\r\n        if (xd[xdi] != BASE) break;\r\n        xd[xdi--] = 0;\r\n        k = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n  if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n    throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction subtract(x, y) {\r\n  var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // Return y negated if x is zero.\r\n  // Return x if y is zero and x is non-zero.\r\n  if (!x.s || !y.s) {\r\n    if (y.s) y.s = -y.s;\r\n    else y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are non-zero numbers with the same sign.\r\n\r\n  e = y.e;\r\n  xe = x.e;\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of zeros\r\n    // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to xd if shorter.\r\n  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(0);\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction toString(x, isExp, sd) {\r\n  var k,\r\n    e = getBase10Exponent(x),\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (e < 0 ? 'e' : 'e+') + e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  clone\r\n *  config/set\r\n */\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * value {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(value) {\r\n    var x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (value instanceof Decimal) {\r\n      x.s = value.s;\r\n      x.e = value.e;\r\n      x.d = (value = value.d) ? value.slice() : value;\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n\r\n      // Reject Infinity/NaN.\r\n      if (value * 0 !== 0) {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      if (value > 0) {\r\n        x.s = 1;\r\n      } else if (value < 0) {\r\n        value = -value;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 0;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (value === ~~value && value < 1e7) {\r\n        x.e = 0;\r\n        x.d = [value];\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, value.toString());\r\n    } else if (typeof value !== 'string') {\r\n      throw Error(invalidArgument + value);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (value.charCodeAt(0) === 45) {\r\n      value = value.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    if (isDecimal.test(value)) parseDecimal(x, value);\r\n    else throw Error(invalidArgument + value);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n  Decimal.clone = clone;\r\n  Decimal.config = Decimal.set = config;\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw Error(decimalError + 'Object expected');\r\n  }\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -1 / 0, 0,\r\n      'toExpPos', 0, 1 / 0\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'LN10']) !== void 0) {\r\n      if (v == Math.LN10) this[p] = new this(v);\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(defaults);\r\n\r\n// Internal constant.\r\nONE = new Decimal(1);\r\n\r\nexport default Decimal;\r\n", "/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      parse(x, n);\r\n    }\r\n\r\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.version = '5.2.2';\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  // Minus zero?\r\n  if (n === 0 && 1 / n < 0) n = '-0';\r\n  else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, dp, rm, more) {\r\n  var xc = x.c,\r\n    i = x.e + dp + 1;\r\n\r\n  if (i < xc.length) {\r\n    if (rm === 1) {\r\n\r\n      // xc[i] is the digit after the digit that may be rounded up.\r\n      more = xc[i] >= 5;\r\n    } else if (rm === 2) {\r\n      more = xc[i] > 5 || xc[i] == 5 &&\r\n        (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n    } else if (rm === 3) {\r\n      more = more || !!xc[0];\r\n    } else {\r\n      more = false;\r\n      if (rm !== 0) throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (i < 1) {\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = -dp;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else {\r\n\r\n      // Remove any digits after the required decimal places.\r\n      xc.length = i--;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[i] > 9;) {\r\n          xc[i] = 0;\r\n          if (!i--) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xc.length; !xc[--i];) xc.pop();\r\n    }\r\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\r\nfunction stringify(x, id, n, k) {\r\n  var e, s,\r\n    Big = x.constructor,\r\n    z = !x.c[0];\r\n\r\n  if (n !== UNDEFINED) {\r\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n    }\r\n\r\n    x = new Big(x);\r\n\r\n    // The index of the digit that may be rounded up.\r\n    n = k - x.e;\r\n\r\n    // Round?\r\n    if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n    // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n    if (id == 2) k = x.e + n + 1;\r\n\r\n    // Append zeros?\r\n    for (; x.c.length < k;) x.c.push(0);\r\n  }\r\n\r\n  e = x.e;\r\n  s = x.c.join('');\r\n  n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) for (e -= n; e--;) s += '0';\r\n    else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) return new Big(k * 0);\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n  q.s = k;\r\n  k = d < 0 ? 0 : d;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n\r\n    // y is non-zero? x is non-zero? Or both are zero.\r\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (a = xe - ye) {\r\n    if (a > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      a = -a;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; a--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  a = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (b) {\r\n    xc.unshift(b);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor(1),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\r\nP.round = function (dp, rm) {\r\n  var Big = this.constructor;\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big(0.5);\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s);\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, Big.DP -= 4, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = (c[j] + b) % 10;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\r\nP.toExponential = function (dp) {\r\n  return stringify(this, 1, dp, dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp) {\r\n  return stringify(this, 2, dp, this.e + dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\r\nP.toPrecision = function (sd) {\r\n  return stringify(this, 3, sd, sd - 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP.toString = function () {\r\n  return stringify(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  return stringify(this, 4);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\nexport default Big;\r\n", "/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n", "export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST\n] as const\nexport type SupportedChainsType = typeof SUPPORTED_CHAINS[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC'\n}\n", "import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  v1MixedRouteQuoterAddress?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070'\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035'\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88'\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E'\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  v1MixedRouteQuoterAddress: '0xBa60b6e6fF25488308789E6e0A65D838be34194e'\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573'\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D'\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2'\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e'\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4'\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8'\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E'\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E'\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE'\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481'\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d'\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557'\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064'\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A'\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66'\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {})\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {})\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6'\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3'\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e'\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8'\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {})\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e')\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd'\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {})\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const v1MixedRouteQuoterAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v1MixedRouteQuoterAddress\n  if (v1MixedRouteQuoterAddress) {\n    memo[chainId] = v1MixedRouteQuoterAddress\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n", "import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n", "import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n", "import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n", "import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n", "import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n", "import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [11155420]: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  [421614]: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  [8453]: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [56]: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [137]: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  [43114]: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX')\n}\n", "import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n", "import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n", "import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n", "import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],
  "mappings": "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",
  "names": ["JSBI", "Array", "constructor", "length", "sign", "__kMaxLength", "RangeError", "BigInt", "arg", "Math", "floor", "Number", "isFinite", "__zero", "__isOneDigitInt", "__oneDigit", "__fromDouble", "result", "__fromString", "SyntaxError", "primitive", "__toPrimitive", "TypeError", "toDebugString", "digit", "push", "toString", "join", "radix", "__toStringBasePowerOfTwo", "__toStringGeneric", "toNumber", "x", "xLength", "value", "__unsignedDigit", "xMsd", "__digit", "msdLeadingZeros", "__clz30", "xBitLength", "exponent", "currentDigit", "digitIndex", "shift", "mantissaHigh", "mantissaHighBitsUnset", "mantissaLow", "mantissaLowBitsUnset", "rounding", "__decideRounding", "signBit", "__kBitConversionInts", "__kBitConversionDouble", "unaryMinus", "__copy", "bitwiseNot", "__absoluteSubOne", "__trim", "__absoluteAddOne", "exponentiate", "y", "expValue", "__kMaxLengthBits", "neededDigits", "__initializeDigits", "msd", "__setDigit", "runningSquare", "multiply", "resultLength", "__clzmsd", "i", "__multiplyAccumulate", "divide", "__absoluteCompare", "resultSign", "divisor", "quotient", "__absoluteDivSmall", "__absoluteDivLarge", "remainder", "remainderDigit", "__absoluteModSmall", "add", "__absoluteAdd", "__absoluteSub", "subtract", "leftShift", "__rightShiftByAbsolute", "__leftShiftByAbsolute", "signedRightShift", "unsignedRightShift", "lessThan", "__compareToBigInt", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual", "equal", "notEqual", "bitwiseAnd", "max", "__absoluteAnd", "y1", "__absoluteOr", "__absoluteAndNot", "bitwiseXor", "__absoluteXor", "bitwiseOr", "asIntN", "n", "neededLength", "topDigit", "compareDigit", "__truncateToNBits", "__truncateAndSubFromPowerOfTwo", "asUintN", "bitsInTopDigit", "ADD", "__toNumeric", "__isBigInt", "LT", "__compare", "LE", "GT", "GE", "EQ", "__equalToNumber", "NE", "newLength", "last", "pop", "mantissaBitsUnset", "topUnconsumedBit", "mask", "rawExponent", "digits", "kMantissaHighTopBit", "msdTopBit", "remainingMantissaBits", "__isWhitespace", "c", "string", "cursor", "current", "charCodeAt", "chars", "bitsPerChar", "__kMaxBitsPerChar", "roundup", "__kBitsPerCharTableMultiplier", "bitsMin", "__kBitsPerCharTableShift", "limDigit", "limAlpha", "parts", "partsBits", "done", "part", "bits", "d", "__fillFromParts", "charsSoFar", "multiplier", "m", "digitsSoFar", "__inplaceMultiplyAdd", "bitsInDigit", "partBits", "Error", "charMask", "charsRequired", "pos", "availableBits", "newDigit", "__kConversionChars", "consumedBits", "isRecursiveCall", "bitLength", "maxBitsPerChar", "minBitsPerChar", "secondHalfChars", "conqueror", "secondHalf", "input", "__halfDigit", "__setHalfDigit", "divisionResult", "firstHalf", "__unequalSign", "leftNegative", "__absoluteGreater", "bothNegative", "__absoluteLess", "xSign", "__compareToNumber", "ySign", "yAbs", "abs", "xDigit", "__compareToDouble", "yBitLength", "compareMantissa", "__comparisonResultToBool", "op", "carry", "r", "borrow", "inputLength", "__setDigitGrow", "yLength", "numPairs", "tmp", "tmpLength", "diff", "multiplicand", "accumulator", "accumulatorIndex", "m2Low", "m2High", "high", "acc", "m1", "m1Low", "m1High", "rLow", "__imul", "rMid1", "rMid2", "rHigh", "__internalMultiplyAdd", "source", "factor", "summand", "rx", "ry", "mLow", "mHigh", "dLow", "dHigh", "pLow", "pMid1", "pMid2", "pHigh", "upperHalf", "lowerHalf", "dividend", "wantQuotient", "wantRemainder", "__halfDigitLength", "n2", "q", "qhatv", "__clz15", "__specialLeftShift", "u", "vn1", "halfDigitBuffer", "qhat", "j", "ujn", "rhat", "vn2", "ujn2", "__inplaceSub", "__inplaceAdd", "__inplaceRightShift", "startIndex", "halfDigits", "sum", "subtrahend", "r0", "sub", "r15", "addDigit", "__toShiftAmount", "digitShift", "bitsShift", "grow", "__rightShiftByMaximum", "mustRoundDown", "obj", "hint", "Symbol", "toPrimitive", "exoticToPrim", "valueOf", "call", "drop", "min", "limit", "msdBitsConsumed", "resultMsd", "minuendMsd", "len", "previous", "updated", "__digitPow", "base", "ArrayBuffer", "Float64Array", "__kBitConversionBuffer", "Int32Array", "clz32", "log", "LN2", "imul", "a", "b", "Decimal", "subtract", "Big", "P", "round", "toFormat", "constructSameAddressMap", "address", "additionalNetworks", "DEFAULT_NETWORKS", "concat", "reduce", "memo", "chainId", "toPercent", "fraction", "Percent", "numerator", "denominator", "validateAndParseAddress", "getAddress", "error", "Error", "checkValidAddress", "startsWith0xLen42HexRegex", "test", "computePriceImpact", "midPrice", "inputAmount", "outputAmount", "quotedOutputAmount", "quote", "priceImpact", "subtract", "divide", "sortedInsert", "items", "add", "maxSize", "comparator", "invariant", "length", "push", "isFull", "lo", "hi", "mid", "splice", "pop", "sqrt", "value", "JSBI", "greaterThanOrEqual", "ZERO", "lessThan", "MAX_SAFE_INTEGER", "BigInt", "Math", "floor", "toNumber", "z", "x", "TWO", "ONE", "ChainId", "SUPPORTED_CHAINS", "NativeCurrencyName", "UNI_ADDRESSES", "UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS", "V2_FACTORY_ADDRESS", "V2_FACTORY_ADDRESSES", "V2_ROUTER_ADDRESS", "V2_ROUTER_ADDRESSES", "DEFAULT_ADDRESSES", "MAINNET_ADDRESSES", "GOERLI_ADDRESSES", "OPTIMISM_ADDRESSES", "ARBITRUM_ONE_ADDRESSES", "POLYGON_ADDRESSES", "CELO_ADDRESSES", "BNB_ADDRESSES", "OPTIMISM_GOERLI_ADDRESSES", "OPTIMISM_SEPOLIA_ADDRESSES", "ARBITRUM_GOERLI_ADDRESSES", "ARBITRUM_SEPOLIA_ADDRESSES", "SEPOLIA_ADDRESSES", "AVALANCHE_ADDRESSES", "BASE_ADDRESSES", "BASE_GOERLI_ADDRESSES", "ZORA_ADDRESSES", "ZORA_SEPOLIA_ADDRESSES", "ROOTSTOCK_ADDRESSES", "BLAST_ADDRESSES", "CHAIN_TO_ADDRESSES_MAP", "V3_CORE_FACTORY_ADDRESSES", "V3_MIGRATOR_ADDRESSES", "MULTICALL_ADDRESSES", "GOVERNANCE_ALPHA_V0_ADDRESSES", "GOVERNANCE_ALPHA_V1_ADDRESSES", "GOVERNANCE_BRAVO_ADDRESSES", "TIMELOCK_ADDRESSES", "MERKLE_DISTRIBUTOR_ADDRESS", "ARGENT_WALLET_DETECTOR_ADDRESS", "QUOTER_ADDRESSES", "NONFUNGIBLE_POSITION_MANAGER_ADDRESSES", "ENS_REGISTRAR_ADDRESSES", "SOCKS_CONTROLLER_ADDRESSES", "TICK_LENS_ADDRESSES", "MIXED_ROUTE_QUOTER_V1_ADDRESSES", "SWAP_ROUTER_02_ADDRESSES", "TradeType", "Rounding", "MaxUint256", "Decimal", "Big", "toSignificantRounding", "toFixedRounding", "Fraction", "CurrencyAmount", "ONE_HUNDRED", "Price", "BaseCurrency", "NativeCurrency", "Token", "WETH9", "Ether", "MAINNET", "OPTIMISM", "OPTIMISM_GOERLI", "OPTIMISM_SEPOLIA", "ARBITRUM_ONE", "ARBITRUM_GOERLI", "ARBITRUM_SEPOLIA", "POLYGON", "POLYGON_MUMBAI", "GOERLI", "SEPOLIA", "CELO_ALFAJORES", "CELO", "BNB", "AVALANCHE", "BASE", "BASE_GOERLI", "ZORA", "ZORA_SEPOLIA", "ROOTSTOCK", "BLAST", "v3CoreFactoryAddress", "multicallAddress", "quoterAddress", "v3MigratorAddress", "nonfungiblePositionManagerAddress", "v1MixedRouteQuoterAddress", "tickLensAddress", "swapRouter02Address", "includes", "id", "toFormat", "_Decimal", "_Big", "ROUND_DOWN", "ROUND_HALF_UP", "ROUND_UP", "tryParseFraction", "fractionish", "invert", "other", "otherParsed", "equal", "multiply", "equalTo", "greaterThan", "toSignificant", "significantDigits", "format", "rounding", "groupSeparator", "Number", "isInteger", "set", "precision", "quotient", "toString", "div", "toSignificantDigits", "decimalPlaces", "toFixed", "DP", "RM", "remainder", "currency", "lessThanOrEqual", "decimalScale", "exponentiate", "decimals", "fromRawAmount", "rawAmount", "fromFractionalAmount", "equals", "added", "subtracted", "multiplied", "divided", "toExact", "isToken", "wrapped", "baseCurrency", "quoteCurrency", "args", "result", "quoteAmount", "baseAmount", "scalar", "currencyAmount", "adjustedForDecimals", "symbol", "name", "isSafeInteger", "bypassChecksum", "buyFeeBps", "sellFeeBps", "gte", "BigNumber", "from", "toLowerCase", "sortsBefore", "onChain", "_etherCache", "isNative", "weth9"]
}
